{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\n\nvar common_1 = require(\"../sdam/common\");\n\nvar server_description_1 = require(\"../sdam/server_description\");\n\nvar RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\n\nvar StreamDescription = /*#__PURE__*/function () {\n  function StreamDescription(address, options) {\n    _classCallCheck(this, StreamDescription);\n\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n\n  _createClass(StreamDescription, [{\n    key: \"receiveResponse\",\n    value: function receiveResponse(response) {\n      if (response == null) {\n        return;\n      }\n\n      this.type = (0, server_description_1.parseServerType)(response);\n\n      var _iterator = _createForOfIteratorHelper(RESPONSE_FIELDS),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n\n          if (response[field] != null) {\n            this[field] = response[field];\n          } // testing case\n\n\n          if ('__nodejs_mock_server__' in response) {\n            this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (response.compression) {\n        this.compressor = this.compressors.filter(function (c) {\n          var _a;\n\n          return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c);\n        })[0];\n      }\n    }\n  }]);\n\n  return StreamDescription;\n}();\n\nexports.StreamDescription = StreamDescription;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountDocumentsOperation = void 0;\n\nvar aggregate_1 = require(\"./aggregate\");\n/** @internal */\n\n\nvar CountDocumentsOperation = /*#__PURE__*/function (_aggregate_1$Aggregat) {\n  _inherits(CountDocumentsOperation, _aggregate_1$Aggregat);\n\n  var _super = _createSuper(CountDocumentsOperation);\n\n  function CountDocumentsOperation(collection, query, options) {\n    _classCallCheck(this, CountDocumentsOperation);\n\n    var pipeline = [];\n    pipeline.push({\n      $match: query\n    });\n\n    if (typeof options.skip === 'number') {\n      pipeline.push({\n        $skip: options.skip\n      });\n    }\n\n    if (typeof options.limit === 'number') {\n      pipeline.push({\n        $limit: options.limit\n      });\n    }\n\n    pipeline.push({\n      $group: {\n        _id: 1,\n        n: {\n          $sum: 1\n        }\n      }\n    });\n    return _super.call(this, collection.s.namespace, pipeline, options);\n  }\n\n  _createClass(CountDocumentsOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      _get(_getPrototypeOf(CountDocumentsOperation.prototype), \"execute\", this).call(this, server, session, function (err, result) {\n        if (err || !result) {\n          callback(err);\n          return;\n        } // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n\n\n        var response = result;\n\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n          callback(undefined, 0);\n          return;\n        }\n\n        var docs = response.cursor.firstBatch;\n        callback(undefined, docs.length ? docs[0].n : 0);\n      });\n    }\n  }]);\n\n  return CountDocumentsOperation;\n}(aggregate_1.AggregateOperation);\n\nexports.CountDocumentsOperation = CountDocumentsOperation;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n\nvar BSON = require(\"../../bson\");\n\nvar deps_1 = require(\"../../deps\");\n\nvar error_1 = require(\"../../error\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar auth_provider_1 = require(\"./auth_provider\");\n\nvar mongo_credentials_1 = require(\"./mongo_credentials\");\n\nvar providers_1 = require(\"./providers\");\n\nvar ASCII_N = 110;\nvar AWS_RELATIVE_URI = 'http://169.254.170.2';\nvar AWS_EC2_URI = 'http://169.254.169.254';\nvar AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nvar bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\nvar MongoDBAWS = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(MongoDBAWS, _auth_provider_1$Auth);\n\n  var _super = _createSuper(MongoDBAWS);\n\n  function MongoDBAWS() {\n    _classCallCheck(this, MongoDBAWS);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MongoDBAWS, [{\n    key: \"auth\",\n    value: function auth(authContext, callback) {\n      var _this = this;\n\n      var connection = authContext.connection,\n          credentials = authContext.credentials;\n\n      if (!credentials) {\n        return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n      }\n\n      if ('kModuleError' in deps_1.aws4) {\n        return callback(deps_1.aws4['kModuleError']);\n      }\n\n      var sign = deps_1.aws4.sign;\n\n      if ((0, utils_1.maxWireVersion)(connection) < 9) {\n        callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n        return;\n      }\n\n      if (!credentials.username) {\n        makeTempCredentials(credentials, function (err, tempCredentials) {\n          if (err || !tempCredentials) return callback(err);\n          authContext.credentials = tempCredentials;\n\n          _this.auth(authContext, callback);\n        });\n        return;\n      }\n\n      var accessKeyId = credentials.username;\n      var secretAccessKey = credentials.password;\n      var sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials\n\n      var awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n        accessKeyId: accessKeyId,\n        secretAccessKey: secretAccessKey,\n        sessionToken: sessionToken\n      } : accessKeyId && secretAccessKey ? {\n        accessKeyId: accessKeyId,\n        secretAccessKey: secretAccessKey\n      } : undefined;\n      var db = credentials.source;\n      crypto.randomBytes(32, function (err, nonce) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var saslStart = {\n          saslStart: 1,\n          mechanism: 'MONGODB-AWS',\n          payload: BSON.serialize({\n            r: nonce,\n            p: ASCII_N\n          }, bsonOptions)\n        };\n        connection.command((0, utils_1.ns)(\"\".concat(db, \".$cmd\")), saslStart, undefined, function (err, res) {\n          if (err) return callback(err);\n          var serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n          var host = serverResponse.h;\n          var serverNonce = serverResponse.s.buffer;\n\n          if (serverNonce.length !== 64) {\n            callback( // TODO(NODE-3483)\n            new error_1.MongoRuntimeError(\"Invalid server nonce length \".concat(serverNonce.length, \", expected 64\")));\n            return;\n          }\n\n          if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n            // TODO(NODE-3483)\n            callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n            return;\n          }\n\n          if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            callback(new error_1.MongoRuntimeError(\"Server returned an invalid host: \\\"\".concat(host, \"\\\"\")));\n            return;\n          }\n\n          var body = 'Action=GetCallerIdentity&Version=2011-06-15';\n          var options = sign({\n            method: 'POST',\n            host: host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body: body\n          }, awsCredentials);\n          var payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n          };\n\n          if (sessionToken) {\n            payload.t = sessionToken;\n          }\n\n          var saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n          };\n          connection.command((0, utils_1.ns)(\"\".concat(db, \".$cmd\")), saslContinue, undefined, callback);\n        });\n      });\n    }\n  }]);\n\n  return MongoDBAWS;\n}(auth_provider_1.AuthProvider);\n\nexports.MongoDBAWS = MongoDBAWS;\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(\"\".concat(AWS_RELATIVE_URI).concat(process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI), undefined, function (err, res) {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(\"\".concat(AWS_EC2_URI, \"/latest/api/token\"), {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, function (err, token) {\n    if (err) return callback(err); // get role name\n\n    request(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH), {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, function (err, roleName) {\n      if (err) return callback(err); // get temp credentials\n\n      request(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH, \"/\").concat(roleName), {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, function (err, creds) {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  var parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, _options, callback) {\n  var options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), _options);\n  var req = http.request(options, function (res) {\n    res.setEncoding('utf8');\n    var data = '';\n    res.on('data', function (d) {\n      return data += d;\n    });\n    res.on('end', function () {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        var parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(\"Invalid JSON response: \\\"\".concat(data, \"\\\"\")));\n      }\n    });\n  });\n  req.on('timeout', function () {\n    req.destroy(new error_1.MongoAWSError(\"AWS request to \".concat(uri, \" timed out after \").concat(options.timeout, \" ms\")));\n  });\n  req.on('error', function (err) {\n    return callback(err);\n  });\n  req.end();\n}","map":null,"metadata":{},"sourceType":"script"}
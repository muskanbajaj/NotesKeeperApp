{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\n\nvar error_1 = require(\"../error\");\n\nvar utils_1 = require(\"../utils\");\n\nvar command_1 = require(\"./command\");\n\nvar operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\n\n\nvar DistinctOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(DistinctOperation, _command_1$CommandOpe);\n\n  var _super = _createSuper(DistinctOperation);\n\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  function DistinctOperation(collection, key, query, options) {\n    var _this;\n\n    _classCallCheck(this, DistinctOperation);\n\n    _this = _super.call(this, collection, options);\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.collection = collection;\n    _this.key = key;\n    _this.query = query;\n    return _this;\n  }\n\n  _createClass(DistinctOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      var _this2 = this;\n\n      var coll = this.collection;\n      var key = this.key;\n      var query = this.query;\n      var options = this.options; // Distinct command\n\n      var cmd = {\n        distinct: coll.collectionName,\n        key: key,\n        query: query\n      }; // Add maxTimeMS if defined\n\n      if (typeof options.maxTimeMS === 'number') {\n        cmd.maxTimeMS = options.maxTimeMS;\n      } // Do we have a readConcern specified\n\n\n      (0, utils_1.decorateWithReadConcern)(cmd, coll, options); // Have we specified collation\n\n      try {\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n        callback(new error_1.MongoCompatibilityError(\"Server \".concat(server.name, \" does not support explain on distinct\")));\n        return;\n      }\n\n      _get(_getPrototypeOf(DistinctOperation.prototype), \"executeCommand\", this).call(this, server, session, cmd, function (err, result) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(undefined, _this2.explain ? result : result.values);\n      });\n    }\n  }]);\n\n  return DistinctOperation;\n}(command_1.CommandOperation);\n\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":null,"metadata":{},"sourceType":"script"}
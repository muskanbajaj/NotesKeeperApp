{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nvar bson_1 = require(\"../bson\");\n\nvar error_1 = require(\"../error\");\n\nvar delete_1 = require(\"../operations/delete\");\n\nvar execute_operation_1 = require(\"../operations/execute_operation\");\n\nvar insert_1 = require(\"../operations/insert\");\n\nvar operation_1 = require(\"../operations/operation\");\n\nvar update_1 = require(\"../operations/update\");\n\nvar promise_provider_1 = require(\"../promise_provider\");\n\nvar utils_1 = require(\"../utils\");\n\nvar write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nvar kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\n\nvar Batch = /*#__PURE__*/_createClass(function Batch(batchType, originalZeroIndex) {\n  _classCallCheck(this, Batch);\n\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n});\n\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\n\nvar BulkWriteResult = /*#__PURE__*/function () {\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  function BulkWriteResult(bulkResult) {\n    _classCallCheck(this, BulkWriteResult);\n\n    this.result = bulkResult;\n  }\n  /** Number of documents inserted. */\n\n\n  _createClass(BulkWriteResult, [{\n    key: \"insertedCount\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents matched for update. */\n\n  }, {\n    key: \"matchedCount\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents modified. */\n\n  }, {\n    key: \"modifiedCount\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents deleted. */\n\n  }, {\n    key: \"deletedCount\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents upserted. */\n\n  }, {\n    key: \"upsertedCount\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n  }, {\n    key: \"upsertedIds\",\n    get: function get() {\n      var _a;\n\n      var upserted = {};\n\n      var _iterator = _createForOfIteratorHelper((_a = this.result.upserted) !== null && _a !== void 0 ? _a : []),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var doc = _step.value;\n          upserted[doc.index] = doc._id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return upserted;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n  }, {\n    key: \"insertedIds\",\n    get: function get() {\n      var _a;\n\n      var inserted = {};\n\n      var _iterator2 = _createForOfIteratorHelper((_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var doc = _step2.value;\n          inserted[doc.index] = doc._id;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return inserted;\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n\n  }, {\n    key: \"ok\",\n    get: function get() {\n      return this.result.ok;\n    }\n    /** The number of inserted documents */\n\n  }, {\n    key: \"nInserted\",\n    get: function get() {\n      return this.result.nInserted;\n    }\n    /** Number of upserted documents */\n\n  }, {\n    key: \"nUpserted\",\n    get: function get() {\n      return this.result.nUpserted;\n    }\n    /** Number of matched documents */\n\n  }, {\n    key: \"nMatched\",\n    get: function get() {\n      return this.result.nMatched;\n    }\n    /** Number of documents updated physically on disk */\n\n  }, {\n    key: \"nModified\",\n    get: function get() {\n      return this.result.nModified;\n    }\n    /** Number of removed documents */\n\n  }, {\n    key: \"nRemoved\",\n    get: function get() {\n      return this.result.nRemoved;\n    }\n    /** Returns an array of all inserted ids */\n\n  }, {\n    key: \"getInsertedIds\",\n    value: function getInsertedIds() {\n      return this.result.insertedIds;\n    }\n    /** Returns an array of all upserted ids */\n\n  }, {\n    key: \"getUpsertedIds\",\n    value: function getUpsertedIds() {\n      return this.result.upserted;\n    }\n    /** Returns the upserted id at the given index */\n\n  }, {\n    key: \"getUpsertedIdAt\",\n    value: function getUpsertedIdAt(index) {\n      return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n\n  }, {\n    key: \"hasWriteErrors\",\n    value: function hasWriteErrors() {\n      return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n\n  }, {\n    key: \"getWriteErrorCount\",\n    value: function getWriteErrorCount() {\n      return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n\n  }, {\n    key: \"getWriteErrorAt\",\n    value: function getWriteErrorAt(index) {\n      return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n\n  }, {\n    key: \"getWriteErrors\",\n    value: function getWriteErrors() {\n      return this.result.writeErrors;\n    }\n    /** Retrieve lastOp if available */\n\n  }, {\n    key: \"getLastOp\",\n    value: function getLastOp() {\n      return this.result.opTime;\n    }\n    /** Retrieve the write concern error if one exists */\n\n  }, {\n    key: \"getWriteConcernError\",\n    value: function getWriteConcernError() {\n      if (this.result.writeConcernErrors.length === 0) {\n        return;\n      } else if (this.result.writeConcernErrors.length === 1) {\n        // Return the error\n        return this.result.writeConcernErrors[0];\n      } else {\n        // Combine the errors\n        var errmsg = '';\n\n        for (var i = 0; i < this.result.writeConcernErrors.length; i++) {\n          var err = this.result.writeConcernErrors[i];\n          errmsg = errmsg + err.errmsg; // TODO: Something better\n\n          if (i === 0) errmsg = errmsg + ' and ';\n        }\n\n        return new WriteConcernError({\n          errmsg: errmsg,\n          code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n        });\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.result;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"BulkWriteResult(\".concat(this.toJSON(), \")\");\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return this.result.ok === 1;\n    }\n  }]);\n\n  return BulkWriteResult;\n}();\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\n\nvar WriteConcernError = /*#__PURE__*/function () {\n  function WriteConcernError(error) {\n    _classCallCheck(this, WriteConcernError);\n\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  _createClass(WriteConcernError, [{\n    key: \"code\",\n    get: function get() {\n      return this[kServerError].code;\n    }\n    /** Write concern error message. */\n\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this[kServerError].errInfo;\n    }\n    /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n\n  }, {\n    key: \"err\",\n    get: function get() {\n      return this[kServerError];\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this[kServerError];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteConcernError(\".concat(this.errmsg, \")\");\n    }\n  }]);\n\n  return WriteConcernError;\n}();\n\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\n\nvar WriteError = /*#__PURE__*/function () {\n  function WriteError(err) {\n    _classCallCheck(this, WriteError);\n\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  _createClass(WriteError, [{\n    key: \"code\",\n    get: function get() {\n      return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.err.index;\n    }\n    /** WriteError message. */\n\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.err.errmsg;\n    }\n    /** WriteError details. */\n\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation() {\n      return this.err.op;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.err.code,\n        index: this.err.index,\n        errmsg: this.err.errmsg,\n        op: this.err.op\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteError(\".concat(JSON.stringify(this.toJSON()), \")\");\n    }\n  }]);\n\n  return WriteError;\n}();\n\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\n\nfunction longOrConvert(value) {\n  return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\n\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n\n\n  if (result.opTime || result.lastOp) {\n    var opTime = result.lastOp || result.opTime; // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = {\n        ts: opTime,\n        t: bson_1.Long.ZERO\n      };\n    } // If there's no lastOp, just set it.\n\n\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      var lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      var opTimeTS = longOrConvert(opTime.ts);\n\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        var lastOpT = longOrConvert(bulkResult.opTime.t);\n        var opTimeT = longOrConvert(opTime.t);\n\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  var nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (var _i = 0; _i < result.writeErrors.length; _i++) {\n      var _writeError = {\n        index: batch.originalIndexes[result.writeErrors[_i].index],\n        code: result.writeErrors[_i].code,\n        errmsg: result.writeErrors[_i].errmsg,\n        errInfo: result.writeErrors[_i].errInfo,\n        op: batch.operations[result.writeErrors[_i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(_writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  var batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    var writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    var mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  var finalOptions = (0, utils_1.resolveOptions)(bulkOperation, _objectSpread(_objectSpread({}, options), {}, {\n    ordered: bulkOperation.isOrdered\n  }));\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.multi;\n      });\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.limit === 0;\n      });\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _a, _b;\n\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n    code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\n\n\nvar MongoBulkWriteError = /*#__PURE__*/function (_error_1$MongoServerE) {\n  _inherits(MongoBulkWriteError, _error_1$MongoServerE);\n\n  var _super = _createSuper(MongoBulkWriteError);\n\n  /** Creates a new MongoBulkWriteError */\n  function MongoBulkWriteError(error, result) {\n    var _this;\n\n    _classCallCheck(this, MongoBulkWriteError);\n\n    var _a;\n\n    _this = _super.call(this, error);\n    _this.writeErrors = [];\n    if (error instanceof WriteConcernError) _this.err = error;else if (!(error instanceof Error)) {\n      _this.message = error.message;\n      _this.code = error.code;\n      _this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n    }\n    _this.result = result;\n    Object.assign(_assertThisInitialized(_this), error);\n    return _this;\n  }\n\n  _createClass(MongoBulkWriteError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n\n  }, {\n    key: \"matchedCount\",\n    get: function get() {\n      return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n\n  }, {\n    key: \"modifiedCount\",\n    get: function get() {\n      return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n\n  }, {\n    key: \"deletedCount\",\n    get: function get() {\n      return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n\n  }, {\n    key: \"upsertedCount\",\n    get: function get() {\n      return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n  }, {\n    key: \"insertedIds\",\n    get: function get() {\n      return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n  }, {\n    key: \"upsertedIds\",\n    get: function get() {\n      return this.result.upsertedIds;\n    }\n  }]);\n\n  return MongoBulkWriteError;\n}(error_1.MongoServerError);\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\n\nvar FindOperators = /*#__PURE__*/function () {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  function FindOperators(bulkOperation) {\n    _classCallCheck(this, FindOperators);\n\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  _createClass(FindOperators, [{\n    key: \"update\",\n    value: function update(updateDocument) {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: true\n      })));\n    }\n    /** Add a single update operation to the bulk operation */\n\n  }, {\n    key: \"updateOne\",\n    value: function updateOne(updateDocument) {\n      if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n        throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n      }\n\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: false\n      })));\n    }\n    /** Add a replace one operation to the bulk operation */\n\n  }, {\n    key: \"replaceOne\",\n    value: function replaceOne(replacement) {\n      if ((0, utils_1.hasAtomicOperators)(replacement)) {\n        throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n      }\n\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: false\n      })));\n    }\n    /** Add a delete one operation to the bulk operation */\n\n  }, {\n    key: \"deleteOne\",\n    value: function deleteOne() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread(_objectSpread({}, currentOp), {}, {\n        limit: 1\n      })));\n    }\n    /** Add a delete many operation to the bulk operation */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread(_objectSpread({}, currentOp), {}, {\n        limit: 0\n      })));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n  }, {\n    key: \"upsert\",\n    value: function upsert() {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n\n      this.bulkOperation.s.currentOp.upsert = true;\n      return this;\n    }\n    /** Specifies the collation for the query condition. */\n\n  }, {\n    key: \"collation\",\n    value: function collation(_collation) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n\n      this.bulkOperation.s.currentOp.collation = _collation;\n      return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n  }, {\n    key: \"arrayFilters\",\n    value: function arrayFilters(_arrayFilters) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n\n      this.bulkOperation.s.currentOp.arrayFilters = _arrayFilters;\n      return this;\n    }\n  }]);\n\n  return FindOperators;\n}();\n\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\n\nvar BulkWriteShimOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(BulkWriteShimOperation, _operation_1$Abstract);\n\n  var _super2 = _createSuper(BulkWriteShimOperation);\n\n  function BulkWriteShimOperation(bulkOperation, options) {\n    var _this2;\n\n    _classCallCheck(this, BulkWriteShimOperation);\n\n    _this2 = _super2.call(this, options);\n    _this2.bulkOperation = bulkOperation;\n    return _this2;\n  }\n\n  _createClass(BulkWriteShimOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      if (this.options.session == null) {\n        // An implicit session could have been created by 'executeOperation'\n        // So if we stick it on finalOptions here, each bulk operation\n        // will use this same session, it'll be passed in the same way\n        // an explicit session would be\n        this.options.session = session;\n      }\n\n      return executeCommands(this.bulkOperation, this.options, callback);\n    }\n  }]);\n\n  return BulkWriteShimOperation;\n}(operation_1.AbstractOperation);\n/** @public */\n\n\nvar BulkOperationBase = /*#__PURE__*/function () {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  function BulkOperationBase(collection, options, isOrdered) {\n    _classCallCheck(this, BulkOperationBase);\n\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    var topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    var namespace = collection.s.namespace; // Used to mark operation as executed\n\n    var executed = false; // Current item\n\n    var currentOp = undefined; // Set max byte size\n\n    var hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    var usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    var maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    var maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    var maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    var maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    var finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    var bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize: maxBsonObjectSize,\n      maxBatchSizeBytes: maxBatchSizeBytes,\n      maxWriteBatchSize: maxWriteBatchSize,\n      maxKeySize: maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  _createClass(BulkOperationBase, [{\n    key: \"insert\",\n    value: function insert(document) {\n      if (document._id == null && !shouldForceServerObjectId(this)) {\n        document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```js\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      if (!selector) {\n        throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n      } // Save a current selector\n\n\n      this.s.currentOp = {\n        selector: selector\n      };\n      return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n\n  }, {\n    key: \"raw\",\n    value: function raw(op) {\n      if (op == null || typeof op !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n      }\n\n      if ('insertOne' in op) {\n        var forceServerObjectId = shouldForceServerObjectId(this);\n\n        if (op.insertOne && op.insertOne.document == null) {\n          // NOTE: provided for legacy support, but this is a malformed operation\n          if (forceServerObjectId !== true && op.insertOne._id == null) {\n            op.insertOne._id = new bson_1.ObjectId();\n          }\n\n          return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n        }\n\n        if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n          op.insertOne.document._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n      }\n\n      if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n        if ('replaceOne' in op) {\n          if ('q' in op.replaceOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n\n          var updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, _objectSpread(_objectSpread({}, op.replaceOne), {}, {\n            multi: false\n          }));\n\n          if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n          }\n\n          return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n        }\n\n        if ('updateOne' in op) {\n          if ('q' in op.updateOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n\n          var _updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, _objectSpread(_objectSpread({}, op.updateOne), {}, {\n            multi: false\n          }));\n\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement);\n        }\n\n        if ('updateMany' in op) {\n          if ('q' in op.updateMany) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n\n          var _updateStatement2 = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, _objectSpread(_objectSpread({}, op.updateMany), {}, {\n            multi: true\n          }));\n\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement2.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement2);\n        }\n      }\n\n      if ('deleteOne' in op) {\n        if ('q' in op.deleteOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, _objectSpread(_objectSpread({}, op.deleteOne), {}, {\n          limit: 1\n        })));\n      }\n\n      if ('deleteMany' in op) {\n        if ('q' in op.deleteMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, _objectSpread(_objectSpread({}, op.deleteMany), {}, {\n          limit: 0\n        })));\n      } // otherwise an unknown operation was provided\n\n\n      throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"batches\",\n    get: function get() {\n      var batches = _toConsumableArray(this.s.batches);\n\n      if (this.isOrdered) {\n        if (this.s.currentBatch) batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n      }\n\n      return batches;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n\n      if (this.s.executed) {\n        return handleEarlyError(new error_1.MongoBatchReExecutionError(), callback);\n      }\n\n      var writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n      if (writeConcern) {\n        this.s.writeConcern = writeConcern;\n      } // If we have current batch\n\n\n      if (this.isOrdered) {\n        if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n      } // If we have no operations in the bulk raise an error\n\n\n      if (this.s.batches.length === 0) {\n        var emptyBatchError = new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        return handleEarlyError(emptyBatchError, callback);\n      }\n\n      this.s.executed = true;\n\n      var finalOptions = _objectSpread(_objectSpread({}, this.s.options), options);\n\n      var operation = new BulkWriteShimOperation(this, finalOptions);\n      return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation, callback);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n\n  }, {\n    key: \"handleWriteError\",\n    value: function handleWriteError(callback, writeResult) {\n      if (this.s.bulkResult.writeErrors.length > 0) {\n        var msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n        callback(new MongoBulkWriteError({\n          message: msg,\n          code: this.s.bulkResult.writeErrors[0].code,\n          writeErrors: this.s.bulkResult.writeErrors\n        }, writeResult));\n        return true;\n      }\n\n      var writeConcernError = writeResult.getWriteConcernError();\n\n      if (writeConcernError) {\n        callback(new MongoBulkWriteError(writeConcernError, writeResult));\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return BulkOperationBase;\n}();\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function get() {\n    return this.s.currentIndex;\n  }\n});\n/** helper function to assist with promiseOrCallback behavior */\n\nfunction handleEarlyError(err, callback) {\n  var Promise = promise_provider_1.PromiseProvider.get();\n\n  if (typeof callback === 'function') {\n    callback(err);\n    return;\n  }\n\n  return Promise.reject(err);\n}\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _a, _b;\n\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n    return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  var currentOp = bulkOp.s.currentOp;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":null,"metadata":{},"sourceType":"script"}
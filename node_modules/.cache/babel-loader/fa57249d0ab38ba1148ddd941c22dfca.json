{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\n\nvar error_1 = require(\"../error\");\n\nvar utils_1 = require(\"../utils\");\n\nvar command_1 = require(\"./command\");\n\nvar operation_1 = require(\"./operation\");\n/** @internal */\n\n\nexports.DB_AGGREGATE_COLLECTION = 1;\nvar MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\n\nvar AggregateOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(AggregateOperation, _command_1$CommandOpe);\n\n  var _super = _createSuper(AggregateOperation);\n\n  function AggregateOperation(ns, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, AggregateOperation);\n\n    _this = _super.call(this, undefined, _objectSpread(_objectSpread({}, options), {}, {\n      dbName: ns.db\n    }));\n    _this.options = options !== null && options !== void 0 ? options : {}; // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n\n    _this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n    _this.pipeline = pipeline; // determine if we have a write stage, override read preference if so\n\n    _this.hasWriteStage = false;\n\n    if (typeof (options === null || options === void 0 ? void 0 : options.out) === 'string') {\n      _this.pipeline = _this.pipeline.concat({\n        $out: options.out\n      });\n      _this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      var finalStage = pipeline[pipeline.length - 1];\n\n      if (finalStage.$out || finalStage.$merge) {\n        _this.hasWriteStage = true;\n      }\n    }\n\n    if (_this.hasWriteStage) {\n      _this.trySecondaryWrite = true;\n    }\n\n    if (_this.explain && _this.writeConcern) {\n      throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n\n    if ((options === null || options === void 0 ? void 0 : options.cursor) != null && typeof options.cursor !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n    }\n\n    return _this;\n  }\n\n  _createClass(AggregateOperation, [{\n    key: \"canRetryRead\",\n    get: function get() {\n      return !this.hasWriteStage;\n    }\n  }, {\n    key: \"addToPipeline\",\n    value: function addToPipeline(stage) {\n      this.pipeline.push(stage);\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      var options = this.options;\n      var serverWireVersion = (0, utils_1.maxWireVersion)(server);\n      var command = {\n        aggregate: this.target,\n        pipeline: this.pipeline\n      };\n\n      if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n        this.readConcern = undefined;\n      }\n\n      if (serverWireVersion >= 5) {\n        if (this.hasWriteStage && this.writeConcern) {\n          Object.assign(command, {\n            writeConcern: this.writeConcern\n          });\n        }\n      }\n\n      if (options.bypassDocumentValidation === true) {\n        command.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n\n      if (typeof options.allowDiskUse === 'boolean') {\n        command.allowDiskUse = options.allowDiskUse;\n      }\n\n      if (options.hint) {\n        command.hint = options.hint;\n      }\n\n      if (options.let) {\n        command.let = options.let;\n      } // we check for undefined specifically here to allow falsy values\n      // eslint-disable-next-line no-restricted-syntax\n\n\n      if (options.comment !== undefined) {\n        command.comment = options.comment;\n      }\n\n      command.cursor = options.cursor || {};\n\n      if (options.batchSize && !this.hasWriteStage) {\n        command.cursor.batchSize = options.batchSize;\n      }\n\n      _get(_getPrototypeOf(AggregateOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n\n  return AggregateOperation;\n}(command_1.CommandOperation);\n\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":null,"metadata":{},"sourceType":"script"}
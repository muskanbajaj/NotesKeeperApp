{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedBulkOperation = void 0;\n\nvar BSON = require(\"../bson\");\n\nvar error_1 = require(\"../error\");\n\nvar common_1 = require(\"./common\");\n/** @public */\n\n\nvar OrderedBulkOperation = /*#__PURE__*/function (_common_1$BulkOperati) {\n  _inherits(OrderedBulkOperation, _common_1$BulkOperati);\n\n  var _super = _createSuper(OrderedBulkOperation);\n\n  function OrderedBulkOperation(collection, options) {\n    _classCallCheck(this, OrderedBulkOperation);\n\n    return _super.call(this, collection, options, true);\n  }\n\n  _createClass(OrderedBulkOperation, [{\n    key: \"addToOperationsList\",\n    value: function addToOperationsList(batchType, document) {\n      // Get the bsonSize\n      var bsonSize = BSON.calculateObjectSize(document, {\n        checkKeys: false,\n        // Since we don't know what the user selected for BSON options here,\n        // err on the safe side, and check the size with ignoreUndefined: false.\n        ignoreUndefined: false\n      }); // Throw error if the doc is bigger than the max BSON size\n\n      if (bsonSize >= this.s.maxBsonObjectSize) // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize)); // Create a new batch object if we don't have a current one\n\n      if (this.s.currentBatch == null) {\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      }\n\n      var maxKeySize = this.s.maxKeySize; // Check if we need to create a new batch\n\n      if ( // New batch if we exceed the max batch op size\n      this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType) {\n        // Save the batch to the execution stack\n        this.s.batches.push(this.s.currentBatch); // Create a new batch\n\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex); // Reset the current size trackers\n\n        this.s.currentBatchSize = 0;\n        this.s.currentBatchSizeBytes = 0;\n      }\n\n      if (batchType === common_1.BatchType.INSERT) {\n        this.s.bulkResult.insertedIds.push({\n          index: this.s.currentIndex,\n          _id: document._id\n        });\n      } // We have an array of documents\n\n\n      if (Array.isArray(document)) {\n        throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n      }\n\n      this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n      this.s.currentBatch.operations.push(document);\n      this.s.currentBatchSize += 1;\n      this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n      this.s.currentIndex += 1;\n      return this;\n    }\n  }]);\n\n  return OrderedBulkOperation;\n}(common_1.BulkOperationBase);\n\nexports.OrderedBulkOperation = OrderedBulkOperation;","map":null,"metadata":{},"sourceType":"script"}
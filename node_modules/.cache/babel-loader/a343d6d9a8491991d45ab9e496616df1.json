{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = void 0;\n\nvar connection_string_1 = require(\"../connection_string\");\n\nvar constants_1 = require(\"../constants\");\n\nvar error_1 = require(\"../error\");\n\nvar topology_1 = require(\"../sdam/topology\");\n\nfunction connect(mongoClient, options, callback) {\n  if (!callback) {\n    throw new error_1.MongoInvalidArgumentError('Callback function must be provided');\n  } // If a connection already been established, we can terminate early\n\n\n  if (mongoClient.topology && mongoClient.topology.isConnected()) {\n    return callback(undefined, mongoClient);\n  }\n\n  var logger = mongoClient.logger;\n\n  var connectCallback = function connectCallback(err) {\n    var warningMessage = 'seed list contains no mongos proxies, replicaset connections requires ' + 'the parameter replicaSet to be supplied in the URI or options object, ' + 'mongodb://server:port/db?replicaSet=name';\n\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      } // Return a more specific error message for MongoClient.connect\n      // TODO(NODE-3483)\n\n\n      return callback(new error_1.MongoRuntimeError(warningMessage));\n    }\n\n    callback(err, mongoClient);\n  };\n\n  if (typeof options.srvHost === 'string') {\n    return (0, connection_string_1.resolveSRVRecord)(options, function (err, hosts) {\n      if (err || !hosts) return callback(err);\n\n      var _iterator = _createForOfIteratorHelper(hosts.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              host = _step$value[1];\n\n          options.hosts[index] = host;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return createTopology(mongoClient, options, connectCallback);\n    });\n  }\n\n  return createTopology(mongoClient, options, connectCallback);\n}\n\nexports.connect = connect;\n\nfunction createTopology(mongoClient, options, callback) {\n  // Create the topology\n  var topology = new topology_1.Topology(options.hosts, options); // Events can be emitted before initialization is complete so we have to\n  // save the reference to the topology on the client ASAP if the event handlers need to access it\n\n  mongoClient.topology = topology;\n  topology.client = mongoClient;\n  topology.once(topology_1.Topology.OPEN, function () {\n    return mongoClient.emit('open', mongoClient);\n  });\n\n  var _iterator2 = _createForOfIteratorHelper(constants_1.MONGO_CLIENT_EVENTS),\n      _step2;\n\n  try {\n    var _loop = function _loop() {\n      var event = _step2.value;\n      topology.on(event, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return mongoClient.emit.apply(mongoClient, [event].concat(args));\n      });\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    } // initialize CSFLE if requested\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (mongoClient.autoEncrypter) {\n    mongoClient.autoEncrypter.init(function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      topology.connect(options, function (err) {\n        if (err) {\n          topology.close({\n            force: true\n          });\n          return callback(err);\n        }\n\n        options.encrypter.connectInternalClient(function (error) {\n          if (error) return callback(error);\n          callback(undefined, topology);\n        });\n      });\n    });\n    return;\n  } // otherwise connect normally\n\n\n  topology.connect(options, function (err) {\n    if (err) {\n      topology.close({\n        force: true\n      });\n      return callback(err);\n    }\n\n    callback(undefined, topology);\n    return;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
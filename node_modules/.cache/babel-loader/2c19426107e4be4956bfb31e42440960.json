{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\n\nvar bson_1 = require(\"./bson\");\n\nvar metrics_1 = require(\"./cmap/metrics\");\n\nvar shared_1 = require(\"./cmap/wire_protocol/shared\");\n\nvar constants_1 = require(\"./constants\");\n\nvar error_1 = require(\"./error\");\n\nvar mongo_types_1 = require(\"./mongo_types\");\n\nvar execute_operation_1 = require(\"./operations/execute_operation\");\n\nvar run_command_1 = require(\"./operations/run_command\");\n\nvar promise_provider_1 = require(\"./promise_provider\");\n\nvar read_concern_1 = require(\"./read_concern\");\n\nvar read_preference_1 = require(\"./read_preference\");\n\nvar common_1 = require(\"./sdam/common\");\n\nvar transactions_1 = require(\"./transactions\");\n\nvar utils_1 = require(\"./utils\");\n\nvar minWireVersionForShardedTransactions = 8;\n/** @internal */\n\nvar kServerSession = Symbol('serverSession');\n/** @internal */\n\nvar kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\n\nvar kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\n\nvar kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\n\nvar kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\n\nvar ClientSession = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(ClientSession, _mongo_types_1$TypedE);\n\n  var _super = _createSuper(ClientSession);\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  function ClientSession(client, sessionPool, options, clientOptions) {\n    var _this;\n\n    _classCallCheck(this, ClientSession);\n\n    _this = _super.call(this);\n    /** @internal */\n\n    _this[_a] = false;\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (options.snapshot === true) {\n      _this[kSnapshotEnabled] = true;\n\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n\n    _this.client = client;\n    _this.sessionPool = sessionPool;\n    _this.hasEnded = false;\n    _this.clientOptions = clientOptions;\n    _this.explicit = !!options.explicit;\n    _this[kServerSession] = _this.explicit ? _this.sessionPool.acquire() : null;\n    _this[kTxnNumberIncrement] = 0;\n    _this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n    _this.clusterTime = options.initialClusterTime;\n    _this.operationTime = undefined;\n    _this.owner = options.owner;\n    _this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    _this.transaction = new transactions_1.Transaction();\n    return _this;\n  }\n  /** The server id associated with this session */\n\n\n  _createClass(ClientSession, [{\n    key: \"id\",\n    get: function get() {\n      var _b;\n\n      return (_b = this[kServerSession]) === null || _b === void 0 ? void 0 : _b.id;\n    }\n  }, {\n    key: \"serverSession\",\n    get: function get() {\n      var serverSession = this[kServerSession];\n\n      if (serverSession == null) {\n        if (this.explicit) {\n          throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n        }\n\n        if (this.hasEnded) {\n          throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n        }\n\n        serverSession = this.sessionPool.acquire();\n        this[kServerSession] = serverSession;\n      }\n\n      return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n\n  }, {\n    key: \"snapshotEnabled\",\n    get: function get() {\n      return this[kSnapshotEnabled];\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      var _b;\n\n      return ((_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.description.type) === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n\n  }, {\n    key: \"pinnedConnection\",\n    get: function get() {\n      return this[kPinnedConnection];\n    }\n    /** @internal */\n\n  }, {\n    key: \"pin\",\n    value: function pin(conn) {\n      if (this[kPinnedConnection]) {\n        throw TypeError('Cannot pin multiple connections to the same session');\n      }\n\n      this[kPinnedConnection] = conn;\n      conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n\n  }, {\n    key: \"unpin\",\n    value: function unpin(options) {\n      if (this.loadBalanced) {\n        return maybeClearPinnedConnection(this, options);\n      }\n\n      this.transaction.unpinServer();\n    }\n  }, {\n    key: \"isPinned\",\n    get: function get() {\n      return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n  }, {\n    key: \"endSession\",\n    value: function endSession(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') callback = options, options = {};\n\n      var finalOptions = _objectSpread({\n        force: true\n      }, options);\n\n      return (0, utils_1.maybePromise)(callback, function (done) {\n        if (_this2.hasEnded) {\n          maybeClearPinnedConnection(_this2, finalOptions);\n          return done();\n        }\n\n        var completeEndSession = function completeEndSession() {\n          maybeClearPinnedConnection(_this2, finalOptions);\n          var serverSession = _this2[kServerSession];\n\n          if (serverSession != null) {\n            // release the server session back to the pool\n            _this2.sessionPool.release(serverSession); // Make sure a new serverSession never makes it onto this ClientSession\n\n\n            Object.defineProperty(_this2, kServerSession, {\n              value: ServerSession.clone(serverSession),\n              writable: false\n            });\n          } // mark the session as ended, and emit a signal\n\n\n          _this2.hasEnded = true;\n\n          _this2.emit('ended', _this2); // spec indicates that we should ignore all errors for `endSessions`\n\n\n          done();\n        };\n\n        if (_this2.inTransaction()) {\n          // If we've reached endSession and the transaction is still active\n          // by default we abort it\n          _this2.abortTransaction(function (err) {\n            if (err) return done(err);\n            completeEndSession();\n          });\n\n          return;\n        }\n\n        completeEndSession();\n      });\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n\n  }, {\n    key: \"advanceOperationTime\",\n    value: function advanceOperationTime(operationTime) {\n      if (this.operationTime == null) {\n        this.operationTime = operationTime;\n        return;\n      }\n\n      if (operationTime.greaterThan(this.operationTime)) {\n        this.operationTime = operationTime;\n      }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n\n  }, {\n    key: \"advanceClusterTime\",\n    value: function advanceClusterTime(clusterTime) {\n      var _b, _c;\n\n      if (!clusterTime || typeof clusterTime !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n      }\n\n      if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n        throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n      }\n\n      if (!clusterTime.signature || ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long' // apparently we decode the key to number?\n      ) {\n        throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n      }\n\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(session) {\n      if (!(session instanceof ClientSession)) {\n        return false;\n      }\n\n      if (this.id == null || session.id == null) {\n        return false;\n      }\n\n      return this.id.id.buffer.equals(session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n\n  }, {\n    key: \"incrementTransactionNumber\",\n    value: function incrementTransactionNumber() {\n      this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n\n  }, {\n    key: \"inTransaction\",\n    value: function inTransaction() {\n      return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(options) {\n      var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n      if (this[kSnapshotEnabled]) {\n        throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n      }\n\n      if (this.inTransaction()) {\n        throw new error_1.MongoTransactionError('Transaction already in progress');\n      }\n\n      if (this.isPinned && this.transaction.isCommitted) {\n        this.unpin();\n      }\n\n      var topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n\n      if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n        throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n      } // increment txnNumber\n\n\n      this.incrementTransactionNumber(); // create transaction state\n\n      this.transaction = new transactions_1.Transaction({\n        readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n        writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n        readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n        maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n      });\n      this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction(callback) {\n      var _this3 = this;\n\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        return endTransaction(_this3, 'commitTransaction', cb);\n      });\n    }\n  }, {\n    key: \"abortTransaction\",\n    value: function abortTransaction(callback) {\n      var _this4 = this;\n\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        return endTransaction(_this4, 'abortTransaction', cb);\n      });\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n\n  }, {\n    key: \"toBSON\",\n    value: function toBSON() {\n      throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n     * or entire transaction as needed (and when the error permits) to better ensure that\n     * the transaction can complete successfully.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     * Any callbacks that do not return a Promise will result in undefined behavior.\n     *\n     * @remarks\n     * This function:\n     * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n     * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n     * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n\n  }, {\n    key: \"withTransaction\",\n    value: function withTransaction(fn, options) {\n      var startTime = (0, utils_1.now)();\n      return attemptTransaction(this, startTime, fn, options);\n    }\n  }]);\n\n  return ClientSession;\n}(mongo_types_1.TypedEventEmitter);\n\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nvar MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nvar NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  var isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\n\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  var conn = session[kPinnedConnection];\n  var error = options === null || options === void 0 ? void 0 : options.error;\n\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n\n  var topology = session.client.topology; // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n\n  if (conn && topology != null) {\n    var servers = Array.from(topology.s.servers.values());\n    var loadBalancer = servers[0];\n\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n\n      if (options === null || options === void 0 ? void 0 : options.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(function (err) {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nvar USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  var Promise = promise_provider_1.PromiseProvider.get();\n  session.startTransaction(options);\n  var promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction().catch(function () {\n      return null;\n    });\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(function () {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, function (err) {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n\n      throw err;\n    }\n\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(function () {\n        return maybeRetryOrThrow(err);\n      });\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  var txnState = session.transaction.state;\n\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  var command = _defineProperty({}, commandName, 1); // apply a writeConcern if specified\n\n\n  var writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern: writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(error, result) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n      return callback();\n    }\n\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult); // per txns spec, must unpin session in this case\n\n          session.unpin({\n            error: error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error: error\n        });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session: session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), function (error, result) {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session: session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n\n    commandHandler(error, result);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\n\n\nvar ServerSession = /*#__PURE__*/function () {\n  /** @internal */\n  function ServerSession() {\n    _classCallCheck(this, ServerSession);\n\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n\n\n  _createClass(ServerSession, [{\n    key: \"hasTimedOut\",\n    value: function hasTimedOut(sessionTimeoutMinutes) {\n      // Take the difference of the lastUse timestamp and now, which will result in a value in\n      // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n      var idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n      return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n\n  }], [{\n    key: \"clone\",\n    value: function clone(serverSession) {\n      var arrayBuffer = new ArrayBuffer(16);\n      var idBytes = Buffer.from(arrayBuffer);\n      idBytes.set(serverSession.id.id.buffer);\n      var id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type); // Manual prototype construction to avoid modifying the constructor of this class\n\n      return Object.setPrototypeOf({\n        id: {\n          id: id\n        },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      }, ServerSession.prototype);\n    }\n  }]);\n\n  return ServerSession;\n}();\n\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\n\nvar ServerSessionPool = /*#__PURE__*/function () {\n  function ServerSessionPool(client) {\n    _classCallCheck(this, ServerSessionPool);\n\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = [];\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n\n\n  _createClass(ServerSessionPool, [{\n    key: \"acquire\",\n    value: function acquire() {\n      var _b, _c, _d;\n\n      var sessionTimeoutMinutes = (_c = (_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.logicalSessionTimeoutMinutes) !== null && _c !== void 0 ? _c : 10;\n      var session = null; // Try to obtain from session pool\n\n      while (this.sessions.length > 0) {\n        var potentialSession = this.sessions.shift();\n\n        if (potentialSession != null && (!!((_d = this.client.topology) === null || _d === void 0 ? void 0 : _d.loadBalanced) || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n          session = potentialSession;\n          break;\n        }\n      } // If nothing valid came from the pool make a new one\n\n\n      if (session == null) {\n        session = new ServerSession();\n      }\n\n      return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(session) {\n      var _b, _c, _d;\n\n      var sessionTimeoutMinutes = (_c = (_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.logicalSessionTimeoutMinutes) !== null && _c !== void 0 ? _c : 10;\n\n      if (((_d = this.client.topology) === null || _d === void 0 ? void 0 : _d.loadBalanced) && !sessionTimeoutMinutes) {\n        this.sessions.unshift(session);\n      }\n\n      if (!sessionTimeoutMinutes) {\n        return;\n      }\n\n      while (this.sessions.length) {\n        var pooledSession = this.sessions[this.sessions.length - 1];\n\n        if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n          this.sessions.pop();\n        } else {\n          break;\n        }\n      }\n\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        if (session.isDirty) {\n          return;\n        } // otherwise, readd this session to the session pool\n\n\n        this.sessions.unshift(session);\n      }\n    }\n  }]);\n\n  return ServerSessionPool;\n}();\n\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\n\nfunction applySession(session, command, options) {\n  var _b, _c;\n\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  } // May acquire serverSession here\n\n\n  var serverSession = session.serverSession;\n\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (((_b = options.writeConcern) === null || _b === void 0 ? void 0 : _b.w) === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n\n    return;\n  } // mark the last use of this session, and apply the `lsid`\n\n\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  var inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  var isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n\n    return;\n  } // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    var readConcern = session.transaction.options.readConcern || ((_c = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _c === void 0 ? void 0 : _c.readConcern);\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n\n  return;\n}\n\nexports.applySession = applySession;\n\nfunction updateSessionFromResponse(session, document) {\n  var _b;\n\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    var atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":null,"metadata":{},"sourceType":"script"}
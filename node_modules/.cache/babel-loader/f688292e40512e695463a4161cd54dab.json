{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = void 0;\n\nvar change_stream_1 = require(\"../change_stream\");\n\nvar constants_1 = require(\"../constants\");\n\nvar aggregate_1 = require(\"../operations/aggregate\");\n\nvar execute_operation_1 = require(\"../operations/execute_operation\");\n\nvar utils_1 = require(\"../utils\");\n\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nvar ChangeStreamCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(ChangeStreamCursor, _abstract_cursor_1$Ab);\n\n  var _super = _createSuper(ChangeStreamCursor);\n\n  function ChangeStreamCursor(client, namespace) {\n    var _this;\n\n    var pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, ChangeStreamCursor);\n\n    _this = _super.call(this, client, namespace, options);\n    _this.pipeline = pipeline;\n    _this.options = options;\n    _this._resumeToken = null;\n    _this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      _this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      _this.resumeToken = options.resumeAfter;\n    }\n\n    return _this;\n  }\n\n  _createClass(ChangeStreamCursor, [{\n    key: \"resumeToken\",\n    get: function get() {\n      return this._resumeToken;\n    },\n    set: function set(token) {\n      this._resumeToken = token;\n      this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n  }, {\n    key: \"resumeOptions\",\n    get: function get() {\n      var options = _objectSpread({}, this.options);\n\n      for (var _i = 0, _arr = ['resumeAfter', 'startAfter', 'startAtOperationTime']; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        delete options[key];\n      }\n\n      if (this.resumeToken != null) {\n        if (this.options.startAfter && !this.hasReceived) {\n          options.startAfter = this.resumeToken;\n        } else {\n          options.resumeAfter = this.resumeToken;\n        }\n      } else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n        options.startAtOperationTime = this.startAtOperationTime;\n      }\n\n      return options;\n    }\n  }, {\n    key: \"cacheResumeToken\",\n    value: function cacheResumeToken(resumeToken) {\n      if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n        this.resumeToken = this.postBatchResumeToken;\n      } else {\n        this.resumeToken = resumeToken;\n      }\n\n      this.hasReceived = true;\n    }\n  }, {\n    key: \"_processBatch\",\n    value: function _processBatch(response) {\n      var cursor = response.cursor;\n\n      if (cursor.postBatchResumeToken) {\n        this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n        var batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n\n        if (batch.length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, _objectSpread({}, this.cursorOptions));\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(session, callback) {\n      var _this2 = this;\n\n      var aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, _objectSpread(_objectSpread(_objectSpread({}, this.cursorOptions), this.options), {}, {\n        session: session\n      }));\n      (0, execute_operation_1.executeOperation)(session.client, aggregateOperation, function (err, response) {\n        if (err || response == null) {\n          return callback(err);\n        }\n\n        var server = aggregateOperation.server;\n        _this2.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n\n        if (_this2.startAtOperationTime == null && _this2.resumeAfter == null && _this2.startAfter == null && _this2.maxWireVersion >= 7) {\n          _this2.startAtOperationTime = response.operationTime;\n        }\n\n        _this2._processBatch(response);\n\n        _this2.emit(constants_1.INIT, response);\n\n        _this2.emit(constants_1.RESPONSE); // TODO: NODE-2882\n\n\n        callback(undefined, {\n          server: server,\n          session: session,\n          response: response\n        });\n      });\n    }\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(batchSize, callback) {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_getMore\", this).call(this, batchSize, function (err, response) {\n        if (err) {\n          return callback(err);\n        }\n\n        _this3.maxWireVersion = (0, utils_1.maxWireVersion)(_this3.server);\n\n        _this3._processBatch(response);\n\n        _this3.emit(change_stream_1.ChangeStream.MORE, response);\n\n        _this3.emit(change_stream_1.ChangeStream.RESPONSE);\n\n        callback(err, response);\n      });\n    }\n  }]);\n\n  return ChangeStreamCursor;\n}(abstract_cursor_1.AbstractCursor);\n\nexports.ChangeStreamCursor = ChangeStreamCursor;","map":null,"metadata":{},"sourceType":"script"}
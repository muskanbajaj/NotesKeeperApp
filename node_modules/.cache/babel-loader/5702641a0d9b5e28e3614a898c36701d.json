{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar error_1 = require(\"../error\");\n\nvar utils_1 = require(\"../utils\");\n\nvar command_1 = require(\"./command\");\n\nvar operation_1 = require(\"./operation\");\n/** @internal */\n\n\nvar AddUserOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(AddUserOperation, _command_1$CommandOpe);\n\n  var _super = _createSuper(AddUserOperation);\n\n  function AddUserOperation(db, username, password, options) {\n    var _this;\n\n    _classCallCheck(this, AddUserOperation);\n\n    _this = _super.call(this, db, options);\n    _this.db = db;\n    _this.username = username;\n    _this.password = password;\n    _this.options = options !== null && options !== void 0 ? options : {};\n    return _this;\n  }\n\n  _createClass(AddUserOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      var db = this.db;\n      var username = this.username;\n      var password = this.password;\n      var options = this.options; // Error out if digestPassword set\n\n      if (options.digestPassword != null) {\n        return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n      }\n\n      var roles;\n\n      if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n        (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n\n        if (db.databaseName.toLowerCase() === 'admin') {\n          roles = ['root'];\n        } else {\n          roles = ['dbOwner'];\n        }\n      } else {\n        roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n      }\n\n      var topology;\n\n      try {\n        topology = (0, utils_1.getTopology)(db);\n      } catch (error) {\n        return callback(error);\n      }\n\n      var digestPassword = topology.lastHello().maxWireVersion >= 7;\n      var userPassword = password;\n\n      if (!digestPassword) {\n        // Use node md5 generator\n        var md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(\"\".concat(username, \":mongo:\").concat(password));\n        userPassword = md5.digest('hex');\n      } // Build the command to execute\n\n\n      var command = {\n        createUser: username,\n        customData: options.customData || {},\n        roles: roles,\n        digestPassword: digestPassword\n      }; // No password\n\n      if (typeof password === 'string') {\n        command.pwd = userPassword;\n      }\n\n      _get(_getPrototypeOf(AddUserOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n\n  return AddUserOperation;\n}(command_1.CommandOperation);\n\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":null,"metadata":{},"sourceType":"script"}
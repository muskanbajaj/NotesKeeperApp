{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\muska\\\\OneDrive\\\\Desktop\\\\NotesApp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\n\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\n\nvar ReadConcern = /*#__PURE__*/function () {\n  /** Constructs a ReadConcern from the read concern level.*/\n  function ReadConcern(level) {\n    _classCallCheck(this, ReadConcern);\n\n    var _a;\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n\n\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n\n\n  _createClass(ReadConcern, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        level: this.level\n      };\n    }\n  }], [{\n    key: \"fromOptions\",\n    value: function fromOptions(options) {\n      if (options == null) {\n        return;\n      }\n\n      if (options.readConcern) {\n        var readConcern = options.readConcern;\n\n        if (readConcern instanceof ReadConcern) {\n          return readConcern;\n        } else if (typeof readConcern === 'string') {\n          return new ReadConcern(readConcern);\n        } else if ('level' in readConcern && readConcern.level) {\n          return new ReadConcern(readConcern.level);\n        }\n      }\n\n      if (options.level) {\n        return new ReadConcern(options.level);\n      }\n\n      return;\n    }\n  }, {\n    key: \"MAJORITY\",\n    get: function get() {\n      return exports.ReadConcernLevel.majority;\n    }\n  }, {\n    key: \"AVAILABLE\",\n    get: function get() {\n      return exports.ReadConcernLevel.available;\n    }\n  }, {\n    key: \"LINEARIZABLE\",\n    get: function get() {\n      return exports.ReadConcernLevel.linearizable;\n    }\n  }, {\n    key: \"SNAPSHOT\",\n    get: function get() {\n      return exports.ReadConcernLevel.snapshot;\n    }\n  }]);\n\n  return ReadConcern;\n}();\n\nexports.ReadConcern = ReadConcern;","map":null,"metadata":{},"sourceType":"script"}